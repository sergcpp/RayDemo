#include "test_common.h"

#include <string>

#include "membuf.h"

#include "../Anim.h"
#include "../Context.h"

namespace {
unsigned char __anim[] = {
    0x41, 0x4e, 0x49, 0x4d, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00,
    0x30, 0x01, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00,
    0x84, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65, 0x30, 0x31, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbd, 0x93, 0x60,
    0x30, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x6e, 0x65,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65, 0x30, 0x32, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbd, 0x93, 0x60,
    0x30, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x6f, 0x6e, 0x65,
    0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x41, 0x72, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65,
    0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x09, 0x39, 0x00, 0x28, 0x30, 0x2e, 0x30, 0x00,
    0x30, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x18, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f,
    0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0x3f, 0xf4, 0x04, 0x35, 0x3f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x04, 0x35, 0xbf,
    0xf4, 0x04, 0x35, 0x3f
};
unsigned int __anim_len = 508;
}

#ifdef USE_GL_RENDER

#if defined(_WIN32)
#include <Windows.h>
#endif

class AnimTest : public Ren::Context {
#if defined(_WIN32)
    HINSTANCE hInstance;
    HWND hWnd;
    HDC hDC;
    HGLRC hRC;
#else
    SDL_Window *window_;
    void *gl_ctx_;
#endif
public:
    AnimTest() {
#if defined(_WIN32)
        hInstance = GetModuleHandle(NULL);
        WNDCLASS wc;
        wc.style = CS_OWNDC;
        wc.lpfnWndProc = ::DefWindowProc;
        wc.cbClsExtra = 0;
        wc.cbWndExtra = 0;
        wc.hInstance = hInstance;
        wc.hIcon = LoadIcon(NULL, IDI_WINLOGO);
        wc.hCursor = LoadCursor(NULL, IDC_ARROW);
        wc.hbrBackground = NULL;
        wc.lpszMenuName = NULL;
        wc.lpszClassName = "AnimTest";

        if (!RegisterClass(&wc)) {
            throw std::runtime_error("Cannot register window class!");
        }

        hWnd = CreateWindow("AnimTest", "!!", WS_OVERLAPPEDWINDOW |
                            WS_CLIPSIBLINGS | WS_CLIPCHILDREN,
                            0, 0, 100, 100, NULL, NULL, hInstance, NULL);

        if (hWnd == NULL) {
            throw std::runtime_error("Cannot create window!");
        }

        hDC = GetDC(hWnd);

        PIXELFORMATDESCRIPTOR pfd;
        memset(&pfd, 0, sizeof(pfd));
        pfd.nSize = sizeof(pfd);
        pfd.nVersion = 1;
        pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL;
        pfd.iPixelType = PFD_TYPE_RGBA;
        pfd.cColorBits = 32;

        int pf = ChoosePixelFormat(hDC, &pfd);
        if (pf == 0) {
            throw std::runtime_error("Cannot find pixel format!");
        }

        if (SetPixelFormat(hDC, pf, &pfd) == FALSE) {
            throw std::runtime_error("Cannot set pixel format!");
        }

        DescribePixelFormat(hDC, pf, sizeof(PIXELFORMATDESCRIPTOR), &pfd);

        hRC = wglCreateContext(hDC);
        wglMakeCurrent(hDC, hRC);
#else
        SDL_Init(SDL_INIT_VIDEO);

        window_ = SDL_CreateWindow("View", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 256, 256, SDL_WINDOW_OPENGL | SDL_WINDOW_HIDDEN);
        gl_ctx_ = SDL_GL_CreateContext(window_);
#endif
        Context::Init(256, 256);
    }

    ~AnimTest() {
#if defined(_WIN32)
        wglMakeCurrent(NULL, NULL);
        ReleaseDC(hWnd, hDC);
        wglDeleteContext(hRC);
        DestroyWindow(hWnd);
        UnregisterClass("AnimTest", hInstance);
#else
        SDL_GL_DeleteContext(gl_ctx_);
        SDL_DestroyWindow(window_);
#ifndef EMSCRIPTEN
        SDL_Quit();
#endif
#endif
    }
};

#else
#include "../SW/SW.h"
class AnimTest : public Ren::Context {
public:
    AnimTest() {
        Ren::Context::Init(256, 256);
    }
};
#endif

void test_anim() {
    {
        // Load anim
        AnimTest t;

        membuf sbuf(__anim, sizeof(__anim));
        std::istream in(&sbuf);

        Ren::Context ctx;
        ctx.Init(1, 1);
        Ren::AnimSeqRef anim_ref = ctx.LoadAnimSequence("anim", in);

        require(std::string(anim_ref->name()) == "ArmatureAction");
        require(anim_ref->fps() == 24);
        require(anim_ref->len() == 3);
        require(anim_ref->frame_size() == 11);
        require(anim_ref->frame_dur() == 1.0f / 24);
        require(anim_ref->anim_dur() == 3.0f / 24);
        require(anim_ref->num_bones() == 2);

        require(std::string(anim_ref->bone(0)->name) == "Bone01");
        require(std::string(anim_ref->bone(0)->parent_name) == "None");
        require(anim_ref->bone(0)->id == 0);
        require(anim_ref->bone(0)->offset == 0);
        require((anim_ref->bone(0)->flags & Ren::AnimHasTranslate) == 1);

        require(std::string(anim_ref->bone(1)->name) == "Bone02");
        require(std::string(anim_ref->bone(1)->parent_name) == "Bone01");
        require(anim_ref->bone(1)->id == 1);
        require(anim_ref->bone(1)->offset == 7); // 4 for rotation, 3 for translation from previous bone
        require(anim_ref->bone(1)->flags != Ren::AnimHasTranslate);

        //translation of Bone01 frame 0
        require(anim_ref->frames()[0] == 0);
        require(anim_ref->frames()[1] == 0);
        require(anim_ref->frames()[2] == 0);

        // rotation of Bone01 frame 0
        require(anim_ref->frames()[3] == 0);
        require(anim_ref->frames()[4] == 0);
        require(anim_ref->frames()[5] == Approx(0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[6] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 0
        require(anim_ref->frames()[7] == 0);
        require(anim_ref->frames()[8] == 0);
        require(anim_ref->frames()[9] == Approx(0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[10] == Approx(0.7071067690849304).epsilon(0.0001));

        //translation of Bone01 frame 1
        require(anim_ref->frames()[11] == 0);
        require(anim_ref->frames()[12] == 5);
        require(anim_ref->frames()[13] == 0);

        // rotation of Bone01 frame 1
        require(anim_ref->frames()[14] == 0);
        require(anim_ref->frames()[15] == 0);
        require(anim_ref->frames()[16] == Approx(0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[17] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 1
        require(anim_ref->frames()[18] == 0);
        require(anim_ref->frames()[19] == 0);
        require(anim_ref->frames()[20] == Approx(0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[21] == Approx(0.7071067690849304).epsilon(0.0001));

        //translation of Bone01 frame 2
        require(anim_ref->frames()[22] == 0);
        require(anim_ref->frames()[23] == 0);
        require(anim_ref->frames()[24] == 0);

        // rotation of Bone01 frame 2
        require(anim_ref->frames()[25] == 0);
        require(anim_ref->frames()[26] == 0);
        require(anim_ref->frames()[27] == Approx(0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[28] == Approx(0.7071067690849304).epsilon(0.0001));

        // rotation of Bone02 frame 2
        require(anim_ref->frames()[29] == 0);
        require(anim_ref->frames()[30] == 0);
        require(anim_ref->frames()[31] == Approx(-0.7071067690849304).epsilon(0.0001));
        require(anim_ref->frames()[32] == Approx(0.7071067690849304).epsilon(0.0001));
    }

}
