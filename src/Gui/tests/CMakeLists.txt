cmake_minimum_required(VERSION 3.2)
project(test_Gui)

set(SDL_STATIC ON)

if(NOT CMAKE_SYSTEM_NAME MATCHES "Android")
    if(WIN32)
        if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SDL2_INCLUDE_DIRS SDL2/x86_64-w64-mingw32/include)
                set(SDL2_LIBRARIES "SDL2/x86_64-w64-mingw32/lib")
            else(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SDL2_INCLUDE_DIRS SDL2/i686-w64-mingw32/include)
                set(SDL2_LIBRARIES "SDL2/i686-w64-mingw32/lib")
            endif()
        elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
            if(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SDL2_LIBRARIES "SDL2/lib/x64")
            else(CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(SDL2_LIBRARIES "SDL2/lib/x86")
            endif()
            set(SDL2_INCLUDE_DIRS SDL2/include)
        endif()
    else(WIN32)
        include(FindPkgConfig)
        pkg_search_module (SDL2 REQUIRED sdl2)

        if(APPLE)
            set(SDL2_INCLUDE_DIRS /usr/local/include)
            set(SDL2_LIBRARIES /usr/local/lib)
        endif(APPLE)
    endif(WIN32)

	include_directories(${SDL2_INCLUDE_DIRS})
	link_directories(${SDL2_LIBRARIES})

    IF(WIN32)
        IF(SDL_STATIC)
            if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
                set(LIBS :libSDL2main.a :libSDL2.a :libSDL2_mixer.a winmm imm32 version)
            elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
                set(LIBS SDL2main.lib SDL2.lib winmm imm32 version)
            endif()
        ELSE(SDL_STATIC)
            set(LIBS SDL2)
        ENDIF(SDL_STATIC)
    ELSE(WIN32)
        IF(APPLE)
            set(LIBS SDL2 dl pthread c)
        ELSE(APPLE)
            set(LIBS X11 SDL2 dl pthread c)
        ENDIF(APPLE)
    ENDIF(WIN32)
endif()

add_executable(test_Gui main.cpp
                        test_common.h
                        test_renderer.cpp
                        test_widgets.cpp)
target_link_libraries(test_Gui ${LIBS} Gui)
