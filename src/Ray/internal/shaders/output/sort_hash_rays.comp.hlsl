struct ray_data_t
{
    float o[3];
    float d[3];
    float pdf;
    float c[3];
    float ior[4];
    float cone_width;
    float cone_spread;
    int xy;
    int depth;
};

struct Params
{
    float4 root_min;
    float4 cell_size;
};

static const uint3 gl_WorkGroupSize = uint3(64u, 1u, 1u);

static const int _321[256] = { 0, 1, 8, 9, 64, 65, 72, 73, 512, 513, 520, 521, 576, 577, 584, 585, 4096, 4097, 4104, 4105, 4160, 4161, 4168, 4169, 4608, 4609, 4616, 4617, 4672, 4673, 4680, 4681, 32768, 32769, 32776, 32777, 32832, 32833, 32840, 32841, 33280, 33281, 33288, 33289, 33344, 33345, 33352, 33353, 36864, 36865, 36872, 36873, 36928, 36929, 36936, 36937, 37376, 37377, 37384, 37385, 37440, 37441, 37448, 37449, 262144, 262145, 262152, 262153, 262208, 262209, 262216, 262217, 262656, 262657, 262664, 262665, 262720, 262721, 262728, 262729, 266240, 266241, 266248, 266249, 266304, 266305, 266312, 266313, 266752, 266753, 266760, 266761, 266816, 266817, 266824, 266825, 294912, 294913, 294920, 294921, 294976, 294977, 294984, 294985, 295424, 295425, 295432, 295433, 295488, 295489, 295496, 295497, 299008, 299009, 299016, 299017, 299072, 299073, 299080, 299081, 299520, 299521, 299528, 299529, 299584, 299585, 299592, 299593, 2097152, 2097153, 2097160, 2097161, 2097216, 2097217, 2097224, 2097225, 2097664, 2097665, 2097672, 2097673, 2097728, 2097729, 2097736, 2097737, 2101248, 2101249, 2101256, 2101257, 2101312, 2101313, 2101320, 2101321, 2101760, 2101761, 2101768, 2101769, 2101824, 2101825, 2101832, 2101833, 2129920, 2129921, 2129928, 2129929, 2129984, 2129985, 2129992, 2129993, 2130432, 2130433, 2130440, 2130441, 2130496, 2130497, 2130504, 2130505, 2134016, 2134017, 2134024, 2134025, 2134080, 2134081, 2134088, 2134089, 2134528, 2134529, 2134536, 2134537, 2134592, 2134593, 2134600, 2134601, 2359296, 2359297, 2359304, 2359305, 2359360, 2359361, 2359368, 2359369, 2359808, 2359809, 2359816, 2359817, 2359872, 2359873, 2359880, 2359881, 2363392, 2363393, 2363400, 2363401, 2363456, 2363457, 2363464, 2363465, 2363904, 2363905, 2363912, 2363913, 2363968, 2363969, 2363976, 2363977, 2392064, 2392065, 2392072, 2392073, 2392128, 2392129, 2392136, 2392137, 2392576, 2392577, 2392584, 2392585, 2392640, 2392641, 2392648, 2392649, 2396160, 2396161, 2396168, 2396169, 2396224, 2396225, 2396232, 2396233, 2396672, 2396673, 2396680, 2396681, 2396736, 2396737, 2396744, 2396745 };
static const int _375[16] = { 0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85 };
static const int _387[33] = { 15, 14, 13, 12, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 4, 3, 3, 2, 1, 0 };
static const int _401[17] = { 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6 };
static const int _402[17] = { 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6 };
static const int _403[17] = { 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6 };
static const int _404[17] = { 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6 };
static const int _405[17] = { 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 6 };
static const int _406[17] = { 0, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 7 };
static const int _407[17] = { 0, 0, 0, 0, 1, 1, 2, 2, 4, 5, 6, 6, 6, 7, 7, 7, 7 };
static const int _408[17] = { 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 6, 7, 7, 7, 7, 7, 7 };
static const int _409[17] = { 15, 15, 15, 15, 15, 15, 15, 15, 8, 8, 8, 8, 8, 8, 8, 8, 8 };
static const int _410[17] = { 15, 15, 15, 15, 15, 15, 14, 14, 12, 10, 9, 8, 8, 8, 8, 8, 8 };
static const int _411[17] = { 15, 15, 15, 15, 14, 14, 14, 13, 12, 10, 10, 9, 9, 8, 8, 8, 8 };
static const int _412[17] = { 15, 14, 14, 14, 14, 14, 13, 12, 12, 11, 10, 10, 9, 9, 9, 9, 8 };
static const int _413[17] = { 14, 14, 14, 14, 14, 13, 13, 12, 12, 11, 10, 10, 10, 9, 9, 9, 9 };
static const int _414[17] = { 14, 14, 14, 14, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 9, 9, 9 };
static const int _415[17] = { 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 9, 9 };
static const int _416[17] = { 14, 14, 13, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 10, 9 };
static const int _417[17] = { 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 10, 10, 10, 10, 10 };
static const int _418[17][17] = { { 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6 }, { 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6 }, { 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6 }, { 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6 }, { 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 6 }, { 0, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 7 }, { 0, 0, 0, 0, 1, 1, 2, 2, 4, 5, 6, 6, 6, 7, 7, 7, 7 }, { 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 6, 7, 7, 7, 7, 7, 7 }, { 15, 15, 15, 15, 15, 15, 15, 15, 8, 8, 8, 8, 8, 8, 8, 8, 8 }, { 15, 15, 15, 15, 15, 15, 14, 14, 12, 10, 9, 8, 8, 8, 8, 8, 8 }, { 15, 15, 15, 15, 14, 14, 14, 13, 12, 10, 10, 9, 9, 8, 8, 8, 8 }, { 15, 14, 14, 14, 14, 14, 13, 12, 12, 11, 10, 10, 9, 9, 9, 9, 8 }, { 14, 14, 14, 14, 14, 13, 13, 12, 12, 11, 10, 10, 10, 9, 9, 9, 9 }, { 14, 14, 14, 14, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 9, 9, 9 }, { 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 9, 9 }, { 14, 14, 13, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 10, 9 }, { 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 10, 10, 10, 10, 10 } };

ByteAddressBuffer _460 : register(t2, space0);
ByteAddressBuffer _478 : register(t1, space0);
RWByteAddressBuffer _532 : register(u0, space0);
cbuffer UniformParams
{
    Params _538_g_params : packoffset(c0);
};


static uint3 gl_GlobalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
};

uint get_ray_hash(ray_data_t r, float3 root_min, float3 cell_size)
{
    return uint(((((_375[_387[clamp(int((1.0f + r.d[2]) * 16.0f), 0, 32)]] << 25) | (_375[_418[clamp(int((1.0f + r.d[1]) * 8.0f), 0, 16)][clamp(int((1.0f + r.d[0]) * 8.0f), 0, 16)]] << 24)) | (_321[clamp(int((r.o[1] - root_min.y) / cell_size.y), 0, 255)] << 2)) | (_321[clamp(int((r.o[2] - root_min.z) / cell_size.z), 0, 255)] << 1)) | (_321[clamp(int((r.o[0] - root_min.x) / cell_size.x), 0, 255)] << 0));
}

void comp_main()
{
    do
    {
        int _454 = int(gl_GlobalInvocationID.x);
        if (uint(_454) >= _460.Load(4))
        {
            break;
        }
        ray_data_t _482;
        [unroll]
        for (int _4ident = 0; _4ident < 3; _4ident++)
        {
            _482.o[_4ident] = asfloat(_478.Load(_4ident * 4 + _454 * 72 + 0));
        }
        [unroll]
        for (int _5ident = 0; _5ident < 3; _5ident++)
        {
            _482.d[_5ident] = asfloat(_478.Load(_5ident * 4 + _454 * 72 + 12));
        }
        _482.pdf = asfloat(_478.Load(_454 * 72 + 24));
        [unroll]
        for (int _6ident = 0; _6ident < 3; _6ident++)
        {
            _482.c[_6ident] = asfloat(_478.Load(_6ident * 4 + _454 * 72 + 28));
        }
        [unroll]
        for (int _7ident = 0; _7ident < 4; _7ident++)
        {
            _482.ior[_7ident] = asfloat(_478.Load(_7ident * 4 + _454 * 72 + 40));
        }
        _482.cone_width = asfloat(_478.Load(_454 * 72 + 56));
        _482.cone_spread = asfloat(_478.Load(_454 * 72 + 60));
        _482.xy = int(_478.Load(_454 * 72 + 64));
        _482.depth = int(_478.Load(_454 * 72 + 68));
        float _622[4] = { _482.ior[0], _482.ior[1], _482.ior[2], _482.ior[3] };
        float _613[3] = { _482.c[0], _482.c[1], _482.c[2] };
        float _606[3] = { _482.d[0], _482.d[1], _482.d[2] };
        float _599[3] = { _482.o[0], _482.o[1], _482.o[2] };
        ray_data_t _592 = { _599, _606, _482.pdf, _613, _622, _482.cone_width, _482.cone_spread, _482.xy, _482.depth };
        ray_data_t param = _592;
        float3 param_1 = _538_g_params.root_min.xyz;
        float3 param_2 = _538_g_params.cell_size.xyz;
        _532.Store(_454 * 4 + 0, get_ray_hash(param, param_1, param_2));
        break;
    } while(false);
}

[numthreads(64, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
    comp_main();
}
