#version 450
#extension GL_GOOGLE_include_directive : require

#include "sort_hash_rays_interface.h"
#include "common.glsl"

LAYOUT_PARAMS uniform UniformParams {
    Params g_params;
};

layout(std430, binding = RAYS_BUF_SLOT) readonly buffer Rays {
    ray_data_t g_rays[];
};

layout(std430, binding = COUNTERS_BUF_SLOT) readonly buffer Counters {
    uint g_counters[];
};

layout(std430, binding = OUT_HASHES_BUF_SLOT) writeonly buffer OutHashes {
    uint g_out_hashes[];
};

const int g_morton_table_16[] = { 0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85 };

const int g_morton_table_256[] = {
    0,          1,          8,          9,          64,         65,         72,         73,         512,        513,        520,        521,        576,        577,        584,        585,
    4096,       4097,       4104,       4105,       4160,       4161,       4168,       4169,       4608,       4609,       4616,       4617,       4672,       4673,       4680,       4681,
    32768,      32769,      32776,      32777,      32832,      32833,      32840,      32841,      33280,      33281,      33288,      33289,      33344,      33345,      33352,      33353,
    36864,      36865,      36872,      36873,      36928,      36929,      36936,      36937,      37376,      37377,      37384,      37385,      37440,      37441,      37448,      37449,
    262144,     262145,     262152,     262153,     262208,     262209,     262216,     262217,     262656,     262657,     262664,     262665,     262720,     262721,     262728,     262729,
    266240,     266241,     266248,     266249,     266304,     266305,     266312,     266313,     266752,     266753,     266760,     266761,     266816,     266817,     266824,     266825,
    294912,     294913,     294920,     294921,     294976,     294977,     294984,     294985,     295424,     295425,     295432,     295433,     295488,     295489,     295496,     295497,
    299008,     299009,     299016,     299017,     299072,     299073,     299080,     299081,     299520,     299521,     299528,     299529,     299584,     299585,     299592,     299593,
    2097152,    2097153,    2097160,    2097161,    2097216,    2097217,    2097224,    2097225,    2097664,    2097665,    2097672,    2097673,    2097728,    2097729,    2097736,    2097737,
    2101248,    2101249,    2101256,    2101257,    2101312,    2101313,    2101320,    2101321,    2101760,    2101761,    2101768,    2101769,    2101824,    2101825,    2101832,    2101833,
    2129920,    2129921,    2129928,    2129929,    2129984,    2129985,    2129992,    2129993,    2130432,    2130433,    2130440,    2130441,    2130496,    2130497,    2130504,    2130505,
    2134016,    2134017,    2134024,    2134025,    2134080,    2134081,    2134088,    2134089,    2134528,    2134529,    2134536,    2134537,    2134592,    2134593,    2134600,    2134601,
    2359296,    2359297,    2359304,    2359305,    2359360,    2359361,    2359368,    2359369,    2359808,    2359809,    2359816,    2359817,    2359872,    2359873,    2359880,    2359881,
    2363392,    2363393,    2363400,    2363401,    2363456,    2363457,    2363464,    2363465,    2363904,    2363905,    2363912,    2363913,    2363968,    2363969,    2363976,    2363977,
    2392064,    2392065,    2392072,    2392073,    2392128,    2392129,    2392136,    2392137,    2392576,    2392577,    2392584,    2392585,    2392640,    2392641,    2392648,    2392649,
    2396160,    2396161,    2396168,    2396169,    2396224,    2396225,    2396232,    2396233,    2396672,    2396673,    2396680,    2396681,    2396736,    2396737,    2396744,    2396745
};

const float g_omega_step = 0.0625;

const int g_omega_table[] = { 15, 14, 13, 12, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 4, 4, 4, 3, 3, 2, 1, 0 };

const float g_phi_step = 0.125;

const int g_phi_table[][17] = {
    { 2,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6  },
    { 1,  2,  2,  2,  2,  2,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6  },
    { 1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6  },
    { 1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  4,  5,  5,  6,  6,  6,  6  },
    { 1,  1,  1,  1,  2,  2,  2,  3,  4,  4,  5,  5,  6,  6,  6,  6,  6  },
    { 0,  1,  1,  1,  1,  2,  2,  3,  4,  4,  5,  6,  6,  6,  6,  6,  7  },
    { 0,  0,  0,  0,  1,  1,  2,  2,  4,  5,  6,  6,  6,  7,  7,  7,  7  },
    { 0,  0,  0,  0,  0,  0,  1,  2,  4,  6,  6,  7,  7,  7,  7,  7,  7  },
    { 15, 15, 15, 15, 15, 15, 15, 15, 8,  8,  8,  8,  8,  8,  8,  8,  8  },
    { 15, 15, 15, 15, 15, 15, 14, 14, 12, 10, 9,  8,  8,  8,  8,  8,  8  },
    { 15, 15, 15, 15, 14, 14, 14, 13, 12, 10, 10, 9,  9,  8,  8,  8,  8  },
    { 15, 14, 14, 14, 14, 14, 13, 12, 12, 11, 10, 10, 9,  9,  9,  9,  8  },
    { 14, 14, 14, 14, 14, 13, 13, 12, 12, 11, 10, 10, 10, 9,  9,  9,  9  },
    { 14, 14, 14, 14, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 9,  9,  9  },
    { 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 9,  9  },
    { 14, 14, 13, 13, 13, 13, 12, 12, 12, 11, 11, 10, 10, 10, 10, 10, 9  },
    { 14, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 10, 10, 10, 10, 10 }
};

uint get_ray_hash(ray_data_t r, vec3 root_min, vec3 cell_size) {
    int x = clamp(int((r.o[0] - root_min.x) / cell_size.x), 0, 255),
        y = clamp(int((r.o[1] - root_min.y) / cell_size.y), 0, 255),
        z = clamp(int((r.o[2] - root_min.z) / cell_size.z), 0, 255);

    x = g_morton_table_256[x];
    y = g_morton_table_256[y];
    z = g_morton_table_256[z];

    int oi = clamp(int((1.0 + r.d[2]) / g_omega_step), 0, 32);
    int pi = clamp(int((1.0 + r.d[1]) / g_phi_step), 0, 16),
        pj = clamp(int((1.0 + r.d[0]) / g_phi_step), 0, 16);

    int o = g_morton_table_16[g_omega_table[oi]];
    int p = g_morton_table_16[g_phi_table[pi][pj]];

    return (o << 25) | (p << 24) | (y << 2) | (z << 1) | (x << 0);
}

layout (local_size_x = LOCAL_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1) in;

void main() {
    const int gi = int(gl_GlobalInvocationID.x);
    if (gi >= g_counters[1]) {
        return;
    }

    ray_data_t r = g_rays[gi];
    g_out_hashes[gi] = get_ray_hash(r, g_params.root_min.xyz, g_params.cell_size.xyz);
}
